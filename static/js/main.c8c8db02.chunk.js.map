{"version":3,"sources":["img/flag.svg","Components/ThisIsLink.js","Components/Header/NavbarItems.js","Components/Header/Header.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","StyledLink","styled","className","href","children","Link","this","props","link","React","Component","Button","button","primary","NavbarBox","div","NavbarItems","ContainerBox","NavBar","Span","span","Header","src","Flag","alt","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wFAAAA,EAAOC,QAAU,IAA0B,kC,2UCG3C,IAMMC,EAAYC,aANC,SAAC,GAAD,IAAGC,EAAH,EAAGA,UAAWC,EAAd,EAAcA,KAAMC,EAApB,EAAoBA,SAApB,OACf,uBAAGF,UAAWA,EAAWC,KAAMA,GAC5BC,KAIWH,CAAF,KAqBDI,E,iLAVP,OAEI,kBAACL,EAAD,CAAYG,KAAMG,KAAKC,MAAMJ,MAAOG,KAAKC,MAAMC,U,GAJxCC,IAAMC,W,o/BCfzB,IAAMC,EAASV,IAAOW,OAAV,KAEI,SAAAL,GAAK,OAAIA,EAAMM,QAAU,gBAAkB,WAChD,SAAAN,GAAK,OAAIA,EAAMM,QAAU,QAAU,mBAQxCC,EAAYb,IAAOc,IAAV,KAiFAC,E,iLA9CP,OACI,kBAACF,EAAD,KACI,4BACI,wBAAIZ,UAAU,cAAd,kBACI,wBAAIA,UAAU,WACV,6BACA,6BACA,6BACA,+BAGR,wBAAIA,UAAU,cAAd,sBACI,wBAAIA,UAAU,WACV,6BACA,6BACA,6BACA,+BAGR,wBAAIA,UAAU,cAAd,YACI,wBAAIA,UAAU,WACV,6BACA,6BACA,6BACA,+BAGR,wBAAIA,UAAU,cAAd,QACA,wBAAIA,UAAU,cAAd,OAEI,wBAAIA,UAAU,WACV,6BACA,6BACA,6BACA,+BAGR,wBAAIA,UAAU,cAAd,UACA,kBAACS,EAAD,uB,GAxCMF,IAAMC,W,8gBCxChC,IAAMO,EAAehB,IAAOc,IAAV,KAQZG,EAASjB,IAAOc,IAAV,KAONI,EAAOlB,IAAOmB,KAAV,KAyBKC,E,iLAZP,OACI,kBAACJ,EAAD,KACA,kBAACC,EAAD,KACA,kBAACC,EAAD,KAAM,kBAAC,EAAD,CAAMhB,KAAK,8BAA8BK,KAAM,yBAAKc,IAAKC,IAAMC,IAAI,gBACzE,kBAAC,EAAD,Y,GANSf,IAAMC,WCrBZe,MARf,WACE,OACE,yBAAKvB,UAAU,OACb,kBAAC,EAAD,QCKcwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.c8c8db02.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/flag.a5cbf70b.svg\";","import React from 'react';\nimport styled from 'styled-components';\n\nconst ThisIsLink = ({ className, href, children }) => (\n    <a className={className} href={href}>\n      {children}\n    </a>\n  );\n  \nconst StyledLink= styled(ThisIsLink)`\n    cursor: pointer;\n`\n   \n\n\n\n\n\nclass Link extends React.Component{\n    render(){\n        return(\n\n            <StyledLink href={this.props.href}>{this.props.link}</StyledLink>\n\n\n        );\n    }\n\n}\n\nexport default Link;","import React from 'react';\nimport styled from 'styled-components';\nimport '../Header/NavbarItem.css'\nconst Button = styled.button`\n  /* Adapt the colors based on primary prop */\n  background: ${props => props.primary ? \"palevioletred\" : \"white\"};\n  color: ${props => props.primary ? \"white\" : \"palevioletred\"};\n\n  font-size: 1em;\n  margin: 1em;\n  padding: 0.25em 1em;\n  border: 2px solid palevioletred;\n  border-radius: 3px;\n`;\nconst NavbarBox = styled.div`\n    ul{\n        margin: 0;\n        list-style: none;\n        display: flex;\n        justify-content: flex-end;\n        align-items: center;\n        color: #fff;\n       \n    }\n    li{\n        padding: 9px 10px 7px;\n    }\n    .NavbarMenu{\n        position: relative;\n        font-size: 14px;\n        font-weight:600;\n    }\n    .NavbarMenu:before{\n        content:\"f078\";\n        position: absolute;\n    }\n    .NavbarMenu:hover .SubMenu{\n        visibility: visible;\n        background: green;\n    }\n    .SubMenu{\n        position: absolute;\n        visibility: hidden;\n        max-width: calc(100vw - 32px);\n    }\n\n`\nclass NavbarItems extends React.Component{\n    render(){\n        return(\n            <NavbarBox>\n                <ul>\n                    <li className=\"NavbarMenu\"> Money transfer \n                        <ul className=\"SubMenu\">\n                            <li></li>\n                            <li></li>\n                            <li></li>\n                            <li></li>\n                        </ul>\n                    </li>\n                    <li className=\"NavbarMenu\"> Borderless account\n                        <ul className=\"SubMenu\">\n                            <li></li>\n                            <li></li>\n                            <li></li>\n                            <li></li>\n                        </ul>\n                    </li>\n                    <li className=\"NavbarMenu\"> Bisiness\n                        <ul className=\"SubMenu\">\n                            <li></li>\n                            <li></li>\n                            <li></li>\n                            <li></li>\n                        </ul>\n                    </li>\n                    <li className=\"NavbarMenu\">Help</li>\n                    <li className=\"NavbarMenu\">Lang\n\n                        <ul className=\"SubMenu\">\n                            <li></li>\n                            <li></li>\n                            <li></li>\n                            <li></li>\n                        </ul>\n                    </li>\n                    <li className=\"NavbarMenu\">Log in</li>\n                    <Button>Register</Button>\n                </ul>\n            </NavbarBox>\n        );\n    }\n\n}\n\nexport default NavbarItems;","import React from 'react';\n// import Container from '../Container';\nimport styled from 'styled-components';\nimport Link from '../ThisIsLink';\nimport Flag from '../../img/flag.svg';\nimport NavbarItems from './NavbarItems';\n\nconst ContainerBox = styled.div`\n    width: 70%;\n    margin: 0 auto;\n    padding: 0 32px;\n    height: 56px;\n    background: pink;\n`\n\nconst NavBar = styled.div`\n    width: 95%;\n    margin: 0 auto;\n    height: 56px;\n    background: blue;\n    position: relative;\n`\nconst Span = styled.span`\nposition: relative;\n\nimg{\n    position: absolute;\n    width: 113px;\n    top: 11px;\n    left: 0;\n}\n`\n\nclass Header extends React.Component{\n    render(){\n        return(\n            <ContainerBox>\n            <NavBar>\n            <Span><Link href=\"https://transferwise.com/ru\" link={<img src={Flag} alt=\"flagLogo\"/>}></Link></Span>\n            <NavbarItems/>\n            </NavBar>\n            </ContainerBox>\n        );\n    }\n\n}\n\nexport default Header;","import React from 'react';\nimport './App.css';\nimport Header from './Components/Header/Header';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header></Header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}